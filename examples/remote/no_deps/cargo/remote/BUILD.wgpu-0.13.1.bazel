"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//remote/no_deps/cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets

# Unsupported target "boids" with type "example" omitted

# Unsupported target "bunnymark" with type "example" omitted

# Unsupported target "capture" with type "example" omitted

# Unsupported target "conservative-raster" with type "example" omitted

# Unsupported target "cube" with type "example" omitted

# Unsupported target "framework" with type "example" omitted

# Unsupported target "hello" with type "example" omitted

# Unsupported target "hello-compute" with type "example" omitted

# Unsupported target "hello-triangle" with type "example" omitted

# Unsupported target "hello-windows" with type "example" omitted

# Unsupported target "mipmap" with type "example" omitted

# Unsupported target "msaa-line" with type "example" omitted

# Unsupported target "shadow" with type "example" omitted

# Unsupported target "skybox" with type "example" omitted

# Unsupported target "texture-arrays" with type "example" omitted

# Unsupported target "water" with type "example" omitted

rust_library(
    name = "wgpu",
    srcs = glob(["**/*.rs"]),
    aliases = {
        "@remote_no_deps__wgpu_types__0_13_2//:wgpu_types": "wgt",
        "@remote_no_deps__wgpu_hal__0_13_2//:wgpu_hal": "hal",
        "@remote_no_deps__wgpu_core__0_13_2//:wgpu_core": "wgc",
    },
    crate_root = "src/lib.rs",
    data = [],
    edition = "2021",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=wgpu",
        "manual",
    ],
    version = "0.13.1",
    # buildifier: leave-alone
    deps = [
        "@remote_no_deps__arrayvec__0_7_2//:arrayvec",
        "@remote_no_deps__log__0_4_17//:log",
        "@remote_no_deps__parking_lot__0_12_1//:parking_lot",
        "@remote_no_deps__raw_window_handle__0_4_3//:raw_window_handle",
        "@remote_no_deps__smallvec__1_9_0//:smallvec",
        "@remote_no_deps__wgpu_types__0_13_2//:wgpu_types",
    ] + selects.with_or({
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@remote_no_deps__wgpu_hal__0_13_2//:wgpu_hal",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        (
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@remote_no_deps__wgpu_core__0_13_2//:wgpu_core",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            "@remote_no_deps__js_sys__0_3_59//:js_sys",
            "@remote_no_deps__naga__0_9_0//:naga",
            "@remote_no_deps__wasm_bindgen__0_2_82//:wasm_bindgen",
            "@remote_no_deps__wasm_bindgen_futures__0_4_32//:wasm_bindgen_futures",
            "@remote_no_deps__web_sys__0_3_59//:web_sys",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "wgpu-tests" with type "test" omitted
